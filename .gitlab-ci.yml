stages:
  - Quality
  - Release

default:
  image: node:20-bullseye-slim
  before_script:
    - npm ci --cache .npm --prefer-offline
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - .npm/

# ============================================================
#                             Anchors
# ============================================================
.createDeployJson: &createDeployJson
  - 'echo {\"commit\": \"$CI_COMMIT_SHA\", \"deploy\": \"$CI_JOB_ID\"} > ./dist/app/deploy.json'

.deploy-env: &deployEnv
  before_script:
    - npm install -g firebase-tools
  script:
    - *createDeployJson
    - firebase hosting:channel:deploy $CI_ENVIRONMENT_SLUG > deploy.log
    - more deploy.log
    - 'HOSTING_REGEX="Channel\sURL.+\K(https.+.app)"'
    - 'DEPLOY_URL=$(grep -oP $HOSTING_REGEX deploy.log) || true'
    - 'echo DEPLOY_URL="$DEPLOY_URL" > deploy.env'
    - more deploy.env
  needs:
    - Build
  rules:
    - when: manual
  artifacts:
    reports:
      dotenv: deploy.env

.stopEnv: &stopEnv
  image: node:18-alpine
  before_script:
    - npm install -g firebase-tools
  script:
    - firebase hosting:channel:delete $CI_ENVIRONMENT_SLUG --force
  when: manual

# ============================================================
#                             Jobs
# ============================================================

Lint:
  stage: Quality
  script:
    - npm run lint

Tests:
  stage: Quality
  script:
    - npm test
  artifacts:
    when: always
    paths:
      - ./reports/tests
    reports:
      junit: ./reports/tests/junit.xml

Build:
  stage: Quality
  before_script:
    - npm ci
  script:
    - npm run build
    - npm run reports:build-stats
    - >
      echo {\"commit\": \"$CI_COMMIT_SHA\", \"build\": \"$CI_JOB_ID\"} > ./dist/app/build.json
  artifacts:
    paths:
      - ./dist
      - ./reports/build-reports.html
    when: on_success
    expire_in: "30 days"

Semantic-Release Dry-Run:
  stage: Quality
  image: node:20
  script:
    - npm run reports:build-stats
    - npm run semantic-release -- --dry-run
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: always

Semantic Release:
  stage: Release
  image: node:20
  script:
    - npm run reports:build-stats
    - npm run semantic-release
  needs:
    - Build
    - Tests
    - Lint
    - Semantic-Release Dry-Run
  dependencies:
    - Build
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual

# ============================================================
#                       Deployment
# ============================================================

Review App:
  <<: *deployEnv
  stage: Quality
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: $DEPLOY_URL
    on_stop: Stop Review App
    deployment_tier: development

Stop Review App:
  stage: .post
  <<: *stopEnv
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  needs: []
  dependencies: []

Deploy Staging:
  <<: *deployEnv
  stage: Release
  environment:
    name: Staging
    url: $DEPLOY_URL
    deployment_tier: staging
  rules:
    - if: $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main"
      when: manual
    - when: never

Deploy Production:
  stage: Release
  before_script:
    - npm install -g firebase-tools
  environment:
    name: Production
    url: $DEPLOY_URL
    deployment_tier: development
  script:
    - *createDeployJson
    - firebase deploy --token "$FIREBASE_TOKEN" -m "Deployment of $CI_COMMIT_SHA" > deploy.log
    - more deploy.log
    - 'HOSTING_REGEX="Hosting\sURL.*\K(https.*)"'
    - 'DEPLOY_URL=$(grep -oP "$HOSTING_REGEX" deploy.log) || true'
    - echo DEPLOY_URL=$DEPLOY_URL > deploy.env
    - more deploy.env
  dependencies:
    - Build
  needs:
    - Lint
    - Tests
    - Build
  artifacts:
    reports:
      dotenv: deploy.env
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
    - when: never

pages:
  stage: Release
  script:
    - mv docs public
    - ls -l
    - mkdir -p ./public/reports
    - mv ./reports/tests/result ./public/reports/tests
    - mv ./reports/tests/lcov-report ./public/reports/coverage
    - mv ./reports/build-reports.html ./public/reports/bundle.html
    - mv ./dist/storybook ./public/storybook
  needs:
    - Tests
    - Build
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
    - when: never
